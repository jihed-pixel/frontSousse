{
  "_args": [
    [
      "react-base16-styling@github:dean177/react-base16-styling#fbc6593",
      "/home/yobi/Desktop/projects/sousse/souseFront/node_modules/react-native-json-tree"
    ]
  ],
  "_from": "dean177/react-base16-styling#fbc6593",
  "_id": "react-base16-styling@0.4.6",
  "_inCache": true,
  "_installable": true,
  "_location": "/react-native-json-tree/react-base16-styling",
  "_phantomChildren": {
    "hsluv": "0.0.3",
    "mumath": "3.3.4"
  },
  "_requested": {
    "hosted": {
      "directUrl": "https://raw.githubusercontent.com/dean177/react-base16-styling/fbc6593/package.json",
      "gitUrl": "git://github.com/dean177/react-base16-styling.git#fbc6593",
      "httpsUrl": "git+https://github.com/dean177/react-base16-styling.git#fbc6593",
      "shortcut": "github:dean177/react-base16-styling#fbc6593",
      "ssh": "git@github.com:dean177/react-base16-styling.git#fbc6593",
      "sshUrl": "git+ssh://git@github.com/dean177/react-base16-styling.git#fbc6593",
      "type": "github"
    },
    "name": "react-base16-styling",
    "raw": "react-base16-styling@github:dean177/react-base16-styling#fbc6593",
    "rawSpec": "github:dean177/react-base16-styling#fbc6593",
    "scope": null,
    "spec": "github:dean177/react-base16-styling#fbc6593",
    "type": "hosted"
  },
  "_requiredBy": [
    "/react-native-json-tree"
  ],
  "_resolved": "git+https://github.com/dean177/react-base16-styling.git#fbc6593cc58c5f4662c40b85964c7f9fbcb3984d",
  "_shasum": "d4c6fde512c8b070693ab39e6836c8cf72187768",
  "_shrinkwrap": null,
  "_spec": "react-base16-styling@github:dean177/react-base16-styling#fbc6593",
  "_where": "/home/yobi/Desktop/projects/sousse/souseFront/node_modules/react-native-json-tree",
  "author": {
    "email": "alexkuz@gmail.com",
    "name": "Alexander",
    "url": "http://kuzya.org/"
  },
  "bugs": {
    "url": "https://github.com/alexkuz/react-base16-styling/issues"
  },
  "dependencies": {
    "base16": "github:dean177/base16-js",
    "color-space": "^1.14.3",
    "lodash.curry": "^4.0.1",
    "lodash.flow": "^3.3.0",
    "pure-color": "^1.2.0"
  },
  "description": "React styling with base16 color scheme support",
  "devDependencies": {},
  "gitHead": "fbc6593cc58c5f4662c40b85964c7f9fbcb3984d",
  "license": "MIT",
  "main": "lib/index.js",
  "name": "react-base16-styling",
  "optionalDependencies": {},
  "readme": "# react-base16-styling\nReact styling with base16 color scheme support\n\nInspired by [react-themeable](https://github.com/markdalgleish/react-themeable), this utility provides flexible theming for your component with [base16](https://github.com/chriskempson/base16) theme support.\n\n## Install\n\n```\nnpm i -S react-base16-styling\n```\n\n## Usage\n\n```jsx\nimport { createStyling } from 'react-base16-styling';\nimport base16Themes from './base16Themes';\n\nfunction getStylingFromBase16(base16Theme) {\n  return {\n    myComponent: {\n      backgroundColor: base16Theme.base00\n    },\n\n    myComponentToggleColor({ style, className }, clickCount) {\n      return {\n        style: {\n          ...style,\n          backgroundColor: clickCount % 2 ? 'red' : 'blue'\n        }\n      }\n    }\n  };\n}\n\nconst createStylingFromTheme = createStyling(getStylingFromBase16, {\n  defaultBase16: base16Themes.solarized,\n  base16Themes\n});\n\nclass MyComponent extends Component {\n  state = { clickCount: 0 }\n  render() {\n    const { theme, invertTheme } = this.props;\n    const { clickCount } = this.state;\n    \n    const styling = createStylingFromTheme(theme, invertTheme);\n    \n    return (\n      <div {...styling('myComponent')}>\n        <a onClick={() => this.setState({ clickCount: clickCount + 1 })}>Click Me</a>\n        <div {...styling('myComponentToggleColor', clickCount)}>\n          {clickCount}\n        </div>\n      </div>\n    )\n  }\n}\n```\n\n## `createStyling`\n\n```js\nfunction(getStylingFromBase16, defaultStylingOptions, themeOrStyling, isLightTheme)\n```\n\nArgument | Signature | Description\n----|-----|-----\n`getStylingFromBase16` | `function(base16Theme)` | creates object with default stylings for your component, using provided base16 theme.\n`defaultStylingOptions` | `{ defaultBase16, base16Themes }` | optional parameters, allow to set default `base16` theme and additional `base16` themes for component\n`themeOrStyling` | `string` or `object` | `base16` theme name, `base16` theme object or styling object\n`invertTheme` | `boolean` | if `true`, theme colors are inverted, creating light version of the theme\n\n\nStyling object values could be:\n    - objects (treated as style definitions)\n    - strings (class names)\n    - functions (they may be provided with additional parameters and should return object { style, className })\n\n## `getBase16Theme`\n```js\nfunction(themeOrStyling, base16Themes)\n```\n\nHelper method that returns `base16` theme object if `themeOrStyling` is `base16` theme name or theme object.\n",
  "readmeFilename": "README.md",
  "version": "0.4.6"
}
